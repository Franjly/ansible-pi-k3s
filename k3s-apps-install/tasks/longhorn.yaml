---
- name: Create "{{ apps.longhorn.namespace }}" namespace
  k8s:
    name: "{{ apps.longhorn.namespace }}"
    kind: Namespace
    state: present
  delegate_to: localhost

- name: Create secret
  template:
    src: "templates/longhorn-backup-target-credential-secret.yaml.j2"
    dest: "{{playbook_dir}}/k3s-apps-install/files/longhorn-backup-target-credential-secret.yaml"
    mode: 0644
  delegate_to: localhost

- name: Apply secret
  k8s:
    state: present
    src: "{{playbook_dir}}/k3s-apps-install/files/longhorn-backup-target-credential-secret.yaml"
  delegate_to: localhost

- name: Temporary disabled the deploy of secret longhorn-backup-target-credential-secret & monitoring
  lineinfile:
    dest: "{{playbook_dir}}/k3s-apps-install/files/homelab-pi-k3s/system/longhorn-system/kustomization.yaml"
    regexp: "{{ item }}"
    line: "#{{ item }}"
    state: present
  with_items:
    - '- ./secrets/longhorn-backup-target-credential-secret.yaml'
    - '- ./resources/service-monitor.yaml'
    - '- ./resources/prometheus-rules.yaml'
  delegate_to: localhost

- name: Commit longhorn changes to repository
  shell: |
    git add kustomization.yaml &&
    git commit -m "[Ansible] Longhorn - Temporary disabled deploy of backup & monitoting resources" &&
    git push
  args:
    chdir: "{{playbook_dir}}/k3s-apps-install/files/homelab-pi-k3s/system/longhorn-system"
  ignore_errors: true
  delegate_to: localhost

- name: Deploy longhorn
  k8s:
    state: present
    src: "{{ item }}"
  with_items:
    - '{{playbook_dir}}/k3s-apps-install/files/argocd-homelab-pi-k3s/system/longhorn-system/project/longhorn-system.yaml'
    - '{{playbook_dir}}/k3s-apps-install/files/argocd-homelab-pi-k3s/system/longhorn-system/application/longhorn-system-no-vault.yaml'
  delegate_to: localhost

- name: Pause 1 minutes to deploy longhorn
  pause:
    minutes: 1

- name: Wait for longhorn pods to be running
  shell: kubectl get pods -n longhorn-system -o json
  register: kubectl_get_pods_longhorn
  until: kubectl_get_pods_longhorn.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
  delegate_to: localhost
  retries: 10
  delay: 30