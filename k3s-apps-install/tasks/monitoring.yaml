---
- name: Create "{{ apps.monitoring_system.namespace }}" namespace
  k8s:
    name: "{{ apps.monitoring_system.namespace }}"
    kind: Namespace
    state: present
  delegate_to: localhost

- name: Get list of uptime-kuma volume backups
  uri:
    url: "{{ apps.longhorn.base_url }}/v1/backupvolumes/{{ apps.monitoring_system.uptime_kuma.volume_name }}?action=backupList"
    method: POST
    validate_certs: false
  register: backup_list
  delegate_to: localhost

  # Get latest backup
- set_fact:
    backup_id: "{{ backup_list | json_query('json.data[*].{created: created, id: id}') | sort(attribute='created') | reverse | json_query('[0].id') }}"

- name: Restore uptime-kuma volume backup from longhorn
  uri:
    url: "{{ apps.longhorn.base_url }}/v1/volumes"
    method: POST
    body: '{"name":"{{ apps.monitoring_system.uptime_kuma.volume_name }}","numberOfReplicas":3,"accessMode":"rwo","encrypted":false,"nodeSelector":[],"diskSelector":[],"fromBackup":"s3://longhorn-backups@us-east-1/?backup={{ backup_id }}&volume={{ apps.monitoring_system.uptime_kuma.volume_name }}","staleReplicaTimeout":20}'
    body_format: json
    validate_certs: false
  delegate_to: localhost

- name: Pause 1 minutes to restore uptime-kuma volume backup
  pause:
    minutes: 1
  delegate_to: localhost
  
- name: Create PV uptime-kuma
  uri:
    url: "https://longhorn.local.tecno-fly.com/v1/volumes/{{ apps.monitoring_system.uptime_kuma.volume_name }}?action=pvCreate"
    method: POST
    body: '{"pvName":"{{ apps.monitoring_system.uptime_kuma.volume_name }}","fsType":"ext4"}'
    body_format: json
    validate_certs: false
  delegate_to: localhost
  
- name: Create PVC uptime-kuma
  uri:
    url: "https://longhorn.local.tecno-fly.com/v1/volumes/{{ apps.monitoring_system.uptime_kuma.volume_name }}?action=pvcCreate"
    method: POST
    body: '{"namespace":"{{ apps.monitoring_system.namespace }}","pvcName":"{{ apps.monitoring_system.uptime_kuma.pvc_name }}"}'
    body_format: json
    validate_certs: false
  delegate_to: localhost
  
- name: Deploy monitoring-system
  k8s:
    state: present
    src: "{{ item }}"
  with_items:
    - '{{playbook_dir}}/k3s-apps-install/files/argocd-homelab-pi-k3s/system/monitoring-system/project/monitoring-system.yaml'
    - '{{playbook_dir}}/k3s-apps-install/files/argocd-homelab-pi-k3s/system/monitoring-system/application/monitoring-system.yaml'
  delegate_to: localhost
  
- name: Pause 60 seconds to deploy kube-prometheus-stack
  pause:
    seconds: 60
  delegate_to: localhost
  
- name: Wait for monitoring-system pods to be running
  shell: kubectl get pods -n monitoring-system -o json
  register: kubectl_get_pods_kube_prometheus_stack
  until: kubectl_get_pods_kube_prometheus_stack.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
  delegate_to: localhost
  retries: 20
  delay: 60
  
- name: Patch calico FelixConfiguration to activate metrics
  shell: "kubectl patch felixconfiguration default --type merge --patch '{\"spec\":{\"prometheusMetricsEnabled\": true}}'"
  delegate_to: localhost
  
- name: Deploy calico-metrics
  k8s:
    state: present
    src: "{{ item }}"
  with_items:
    - '{{playbook_dir}}/k3s-apps-install/files/argocd-homelab-pi-k3s/system/calico-metrics/project/calico-metrics.yaml'
    - '{{playbook_dir}}/k3s-apps-install/files/argocd-homelab-pi-k3s/system/calico-metrics/application/calico-metrics.yaml'
  delegate_to: localhost
  
- name: Restore longhorn kustomization file
  lineinfile:
    dest: "{{playbook_dir}}/k3s-apps-install/files/homelab-pi-k3s/system/longhorn-system/kustomization.yaml"
    regexp: "^#{{ item }}"
    line: "{{ item }}"
    state: present
  with_items:
    - '- ./resources/service-monitor.yaml'
    - '- ./resources/prometheus-rules.yaml'
  delegate_to: localhost
  
- name: Commit longhorn changes to repository
  shell: |
    git add kustomization.yaml &&
    git commit -m "[Ansible] Longhorn - Restore kustomization file" &&
    git push
  args:
    chdir: "{{playbook_dir}}/k3s-apps-install/files/homelab-pi-k3s/system/longhorn-system"
  ignore_errors: true
  delegate_to: localhost
  
- name: Enable ingress-nginx metrics
  lineinfile:
    dest: "{{playbook_dir}}/k3s-apps-install/files/homelab-pi-k3s/system/ingress-nginx/values.yaml"
    regexp: "^(\\s*)enabled:.*"
    line: '\1enabled: true'
    firstmatch: true
    backrefs: true
    state: present
  delegate_to: localhost
  
- name: Enable ingress-nginx metrics
  lineinfile:
    dest: "{{playbook_dir}}/k3s-apps-install/files/homelab-pi-k3s/system/ingress-nginx/kustomization.yaml"
    regexp: "^#{{ item }}"
    line: "{{ item }}"
    state: present
  with_items:
    - '- ./resources/prometheus-rules.yaml'
  delegate_to: localhost
  
- name: Commit ingress-nginx changes to repository
  shell: |
    git add values.yaml &&
    git add kustomization.yaml &&
    git commit -m "[Ansible] ingress-nginx - Enable metrics" &&
    git push
  args:
    chdir: "{{playbook_dir}}/k3s-apps-install/files/homelab-pi-k3s/system/ingress-nginx"
  ignore_errors: true
  delegate_to: localhost