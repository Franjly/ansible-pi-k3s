---
- name: Create "{{ apps.dashboards.namespace }}" namespace
  k8s:
    name: "{{ apps.dashboards.namespace }}"
    kind: Namespace
    state: present
  delegate_to: localhost

- name: Get list of dashboards apps volume backups
  uri:
    url: "{{ apps.longhorn.base_url }}/v1/backupvolumes/{{ item.volume_name }}?action=backupList"
    method: POST
    validate_certs: false
  register: backup_list
  loop: "{{ apps.dashboards.volumes }}"
  loop_control:
    loop_var: item
  when: apps.dashboards.volumes is defined
  delegate_to: localhost 

- name: Initialize list with recent backupsId
  set_fact:
    recent_backup_ids: []
  when: apps.dashboards.volumes is defined
  delegate_to: localhost
  
- name: Filter elements data
  set_fact:
    filtered_results: "{{ backup_list.results | selectattr('json.data') | list }}"
  when: apps.dashboards.volumes is defined
  delegate_to: localhost
  
- name: Create list with recents backupID for al the dashboards apps
  set_fact:
    recent_backup_ids: "{{ recent_backup_ids + [item | json_query('json.data[*].{created: created, id: id}') | sort(attribute='created') | reverse | json_query('[0].id')] }}"
  loop: "{{ filtered_results }}"
  loop_control:
    loop_var: item
  when: apps.dashboards.volumes is defined and item.changed == false and item.json.data is defined
  delegate_to: localhost
  
- name: Show recent_backup_ids
  debug:
    var: recent_backup_ids
  when: apps.dashboards.volumes is defined
  delegate_to: localhost
  
- name: Restore each dashboards app volume backup
  uri:
    url: "{{ apps.longhorn.base_url }}/v1/volumes"
    method: POST
    body: '{"name":"{{ item.volume_name }}","numberOfReplicas":3,"accessMode":"rwo","encrypted":false,"nodeSelector":[],"diskSelector":[],"fromBackup":"s3://longhorn-backups@us-east-1/?backup={{ recent_backup_ids[index] }}&volume={{ item.volume_name }}","staleReplicaTimeout":20}'
    body_format: json
    validate_certs: false
  loop: "{{ apps.dashboards.volumes }}"
  loop_control:
    loop_var: item
    index_var: index
  when: apps.dashboards.volumes is defined
  delegate_to: localhost

- name: Pause 1 minutes to restore dashboards volume backup
  pause:
    minutes: 1
  when: apps.dashboards.volumes is defined
  delegate_to: localhost
  
- name: Create PV dashboards
  uri:
    url: "https://longhorn.local.tecno-fly.com/v1/volumes/{{ item.volume_name }}?action=pvCreate"
    method: POST
    body: '{"pvName":"{{ item.volume_name }}","fsType":"ext4"}'
    body_format: json
    validate_certs: false
  with_items: "{{ apps.dashboards.volumes }}"
  when: apps.dashboards.volumes is defined
  delegate_to: localhost

- name: Create PVC dashboards
  uri:
    url: "https://longhorn.local.tecno-fly.com/v1/volumes/{{ item.volume_name }}?action=pvcCreate"
    method: POST
    body: '{"namespace":"{{ apps.dashboards.namespace }}","pvcName":"{{ item.pvc_name }}"}'
    body_format: json
    validate_certs: false
  with_items: "{{ apps.dashboards.volumes }}"
  when: apps.dashboards.volumes is defined
  delegate_to: localhost
  
- name: Deploy dashboards
  k8s:
    state: present
    src: "{{ item }}"
  with_items:
    - '{{playbook_dir}}/k3s-apps-install/files/argocd-homelab-pi-k3s/apps/dashboards/project/dashboards.yaml'
    - '{{playbook_dir}}/k3s-apps-install/files/argocd-homelab-pi-k3s/apps/dashboards/application/dashboards.yaml'
  delegate_to: localhost
  
- name: Pause 30 seconds to deploy dashboards
  pause:
    seconds: 30
  delegate_to: localhost
  
- name: Wait for dashboards pods to be running
  shell: kubectl get pods -n dashboards -o json
  register: kubectl_get_pods_dashboards
  until: kubectl_get_pods_dashboards.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
  delegate_to: localhost
  retries: 10
  delay: 30